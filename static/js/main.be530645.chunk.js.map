{"version":3,"sources":["utils/sort.js","THSort/index.js","TextMatch.js","EmployeeRow.js","TextFilter.js","utils/format.js","CheckGroupFilter.js","utils/employeeTitles.js","utils/API.js","utils/filter.js","EmployeeTable.js","App.js","index.js"],"names":["SORT_STATES","SORT","SORT_UP","SORT_DOWN","NAME_SORT","title","nameField","nameSortKeys","reduce","obj","nameObj","Object","assign","SORT_OBJ","modifySort","sortName","currentSort","sortToModify","keys","forEach","key","indexNewSort","findIndex","state","length","getSortState","employeeList","sortCol","dir","sort","empA","empB","name","localeCompare","sortEmployees","THSort","props","iconName","icon","scope","className","onClick","TextMatch","match","text","matchWith","Fragment","slice","EmployeeRow","src","employee","picture","thumbnail","alt","first","last","style","borderRadius","nameMatch","email","phone","location","postcode","TextFilter","htmlFor","id","type","placeholder","onChange","formatToId","toLowerCase","replace","CheckGroupFilter","checkList","map","checkItem","index","value","defaultChecked","filters","update","EMPLOYEE_TITLES","API","getEmployees","fetch","then","response","json","results","user","Math","floor","random","employeeTitleFilters","FILTER_OBJ","RegExp","modifyNameFilter","input","currentFilters","filterToModify","modifyTitleFilter","filterEmployees","nameFilter","filter","test","filterEmployeeName","allowedTitles","push","includes","filterEmployeeTitle","EmployeeTable","employees","changeNameFilter","event","setState","target","changeTitleFilter","changeNameSort","console","log","this","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be530645.chunk.js","sourcesContent":["/*****************************/\n// Sort states\n/*****************************/\n/*\n  SORT = default (non-sorted)\n  SORT_UP = ASC sort\n  SORT_DOWN = DESC sort\n */\nexport const SORT_STATES = [\"sort\", \"sort-up\", \"sort-down\"];\nexport const [SORT, SORT_UP, SORT_DOWN] = SORT_STATES;\n\nexport function getSortState(currentSort) {\n  let indexNewSort = SORT_STATES.findIndex(state => state === currentSort) + 1;\n  return indexNewSort === SORT_STATES.length\n    ? SORT_STATES[0]\n    : SORT_STATES[indexNewSort];\n}\n\n/*****************************/\n// Setting up Sort Object\n/*****************************/\n\nexport const NAME_SORT = [\n  {\n    title: \"First Name\",\n    nameField: \"first\",\n  },\n  {\n    title: \"Last Name\",\n    nameField: \"last\",\n  },\n];\n// Reducing NAME_SORT items to keys set to default SORT state\nconst nameSortKeys = NAME_SORT.reduce(\n  (obj, nameObj) => Object.assign(obj, { [nameObj.title]: SORT }),\n  {}\n);\n\n/*** Main object holding all sorts for EmployeeTable ***/\nexport const SORT_OBJ = {\n  ...nameSortKeys,\n};\n\n/*****************************/\n// Modifying sort\n/*****************************/\n// There can be only one active sort\n// All other sort properties are reset when another\n// is changed\nexport function modifySort(sortName, currentSort) {\n  const sortToModify = currentSort;\n  Object.keys(sortToModify).forEach(key => {\n    if (key !== sortName) {\n      sortToModify[key] = SORT;\n    }\n  });\n  sortToModify[sortName] = getSortState(sortToModify[sortName]);\n  return sortToModify;\n}\n\n/*****************************/\n// Sort functions\n/*****************************/\n/* Every sort function takes a list (assumped employee list)\nand returns a sorted array */\nexport function sortName(employeeList, sortCol, dir) {\n  const employeeListCopy = [...employeeList];\n  return employeeListCopy.sort(\n    (empA, empB) =>\n      empA.name[sortCol].localeCompare(empB.name[sortCol]) *\n      (dir === SORT_UP ? 1 : dir === SORT_DOWN ? -1 : 0)\n  );\n}\n\nexport function sortEmployees(employeeList, sort) {\n  for (const nameObj of NAME_SORT) {\n    if (sort[nameObj.title] !== SORT) {\n      return sortName(employeeList, nameObj.nameField, sort[nameObj.title]);\n    }\n  }\n\n  return employeeList;\n}\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { SORT, SORT_UP, SORT_DOWN } from \"./../utils/sort\";\r\n\r\nfunction THSort(props) {\r\n  let iconName;\r\n  switch (props.icon) {\r\n    case SORT_DOWN:\r\n      iconName = \"fa-sort-down\";\r\n      break;\r\n    case SORT_UP:\r\n      iconName = \"fa-sort-up\";\r\n      break;\r\n    case SORT:\r\n    default:\r\n      iconName = \"fa-sort\";\r\n  }\r\n  return (\r\n    <th scope=\"col\" className=\"th-sort\" onClick={props.onClick}>\r\n      <p className=\"d-flex justify-content-between mb-0 align-items-center\">\r\n        {props.title}\r\n        <i className={\"fas \" + iconName}></i>\r\n      </p>\r\n    </th>\r\n  );\r\n}\r\n\r\nexport default THSort;\r\n","import React from \"react\";\n\n// Bolds matched text\n\nfunction TextMatch(props) {\n  const match = props.text.match(props.matchWith);\n  if (match) {\n    return (\n      <React.Fragment>\n        <strong>{match[0]}</strong>\n        {props.text.slice(match[0].length)}\n      </React.Fragment>\n    );\n  } else {\n    return props.text;\n  }\n}\n\nexport default TextMatch;\n","import React from \"react\";\n\n// Formatters\nimport TextMatch from \"./TextMatch\";\n\nfunction EmployeeRow(props) {\n  return (\n    <tr>\n      <td className=\"align-middle\">\n        <img\n          src={props.employee.picture.thumbnail}\n          alt={`${props.employee.name.first} ${props.employee.name.last}`}\n          style={{ borderRadius: \"50%\" }}\n        />\n      </td>\n      <td className=\"align-middle\">{props.employee.title}</td>\n      <td className=\"align-middle\">\n        <TextMatch\n          text={props.employee.name.first}\n          matchWith={props.nameMatch}\n        />\n      </td>\n      <td className=\"align-middle\">\n        <TextMatch\n          text={props.employee.name.last}\n          matchWith={props.nameMatch}\n        />\n      </td>\n      <td className=\"align-middle\">{props.employee.email}</td>\n      <td className=\"align-middle\">{props.employee.phone}</td>\n      <td className=\"align-middle\">{props.employee.location.postcode}</td>\n    </tr>\n  );\n}\n\nexport default EmployeeRow;\n","import React from \"react\";\n\nfunction TextFilter(props) {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={props.id}>{props.title}</label>\n      <input\n        id={props.id}\n        type=\"text\"\n        className=\"form-control\"\n        placeholder={props.placeholder}\n        onChange={props.onChange}\n      />\n    </div>\n  );\n}\n\nexport default TextFilter;\n","/* Each format function takes an input and returns\nformated information */\nexport function formatToId(text) {\n  return text.toLowerCase().replace(\" \", \"-\");\n}\n","import React from \"react\";\nimport { formatToId } from \"./utils/format\";\n\n/* A group of checkbox items\nused as filters for data*/\n\nfunction CheckGroupFilter(props) {\n  return (\n    <div className=\"form-group d-flex flex-wrap\">\n      {props.checkList.map((checkItem, index) => (\n        <div className=\"form-check w-25\" key={index}>\n          <input\n            className=\"form-check-input\"\n            type=\"checkbox\"\n            value={checkItem}\n            defaultChecked={props.filters[checkItem]}\n            id={formatToId(checkItem)}\n            onChange={() => {\n              props.update(checkItem);\n            }}\n          />\n          <label\n            className=\"form-check-label pr-3 pb-2\"\n            htmlFor={formatToId(checkItem)}\n          >\n            {checkItem}\n          </label>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default CheckGroupFilter;\n","/* The potential titles that an employee can have. These\nare randomly assigned to the users from the Random User API.*/\n\nexport const EMPLOYEE_TITLES = [\n  \"Front-End Developer\",\n  \"Back-End Developer\",\n  \"Full-Stack Developer\",\n  \"Dev Ops\",\n];\n\nexport function getRandomTitle() {\n  return EMPLOYEE_TITLES[Math.floor(Math.random() * EMPLOYEE_TITLES.length)];\n}\n","import { getRandomTitle } from \"./employeeTitles\";\n\nconst API = {\n  getEmployees() {\n    return fetch(\n      \"https://randomuser.me/api/?results=50&nat=ca&exc=login,gender,registered,nat,id&noinfo\"\n    )\n      .then(response => response.json())\n      .then(obj => addEmployeeTitles(obj.results));\n  },\n};\n\nfunction addEmployeeTitles(userList) {\n  return userList.map(user => {\n    user.title = getRandomTitle();\n    return user;\n  });\n}\n\nexport default API;\n","import { EMPLOYEE_TITLES } from \"./employeeTitles\";\n\n/*****************************/\n// Setting up filter object\n/*****************************/\n// Reducing employee titles to keys that can be used\n// to track title filters\nconst employeeTitleFilters = EMPLOYEE_TITLES.reduce(\n  (obj, title) => Object.assign(obj, { [title]: true }),\n  {}\n);\n\n/*** Main object holding all filters for EmployeeTable ***/\nexport const FILTER_OBJ = {\n  name: new RegExp(),\n  ...employeeTitleFilters,\n};\n\n/*****************************/\n// Modifying filter state\n/*****************************/\n/* Each filter state function\ntakes the current state, the value to change it with\nand returns an entire filter object  which is used to\nupdate the state in EmployeeTable*/\n\nexport function modifyNameFilter(input, currentFilters) {\n  const filterToModify = currentFilters;\n  filterToModify.name = input ? new RegExp(`^${input}`, \"i\") : new RegExp();\n  return filterToModify;\n}\n\nexport function modifyTitleFilter(title, currentFilters) {\n  const filterToModify = currentFilters;\n  filterToModify[title] = !filterToModify[title];\n  return filterToModify;\n}\n\n/*****************************/\n// Filter functions\n/*****************************/\n/* Each of the filter functions\ntakes an array (assumped employee array) and returns\na filtered array */\n\nexport function filterEmployeeName(employeeList, nameFilter) {\n  return employeeList.filter(\n    employee =>\n      nameFilter.test(employee.name.first) ||\n      nameFilter.test(employee.name.last)\n  );\n}\n\nexport function filterEmployeeTitle(employeeList, filters) {\n  const allowedTitles = [];\n  for (const title of EMPLOYEE_TITLES) {\n    if (filters[title]) {\n      allowedTitles.push(title);\n    }\n  }\n  return employeeList.filter(employee =>\n    allowedTitles.includes(employee.title)\n  );\n}\n\nexport function filterEmployees(employeeList, filters) {\n  const filteredByTitle = filterEmployeeTitle(employeeList, filters);\n  const filteredByName = filterEmployeeName(filteredByTitle, filters.name);\n  return filteredByName;\n}\n","import React from \"react\";\n\n// Components\nimport THSort from \"./THSort\";\nimport EmployeeRow from \"./EmployeeRow\";\nimport TextFilter from \"./TextFilter\";\nimport CheckGroupFilter from \"./CheckGroupFilter\";\n\n// Data\nimport API from \"./utils/API.js\";\nimport { EMPLOYEE_TITLES } from \"./utils/employeeTitles\";\n\n// Filter\nimport {\n  FILTER_OBJ,\n  modifyNameFilter,\n  modifyTitleFilter,\n  filterEmployees,\n} from \"./utils/filter.js\";\n\n// Sort\nimport {\n  SORT_OBJ,\n  NAME_SORT,\n  modifySort,\n  sortEmployees,\n} from \"./utils/sort.js\";\n\nclass EmployeeTable extends React.Component {\n  state = {\n    employees: [],\n    filters: FILTER_OBJ,\n    sort: SORT_OBJ,\n  };\n\n  changeNameFilter = event => {\n    this.setState({\n      filters: modifyNameFilter(event.target.value, this.state.filters),\n    });\n  };\n\n  changeTitleFilter = title => {\n    this.setState({\n      filters: modifyTitleFilter(title, this.state.filters),\n    });\n  };\n\n  changeNameSort = sortName => {\n    this.setState({\n      sort: modifySort(sortName, this.state.sort),\n    });\n  };\n\n  getEmployees = () => {\n    const filteredEmployees = filterEmployees(\n      this.state.employees,\n      this.state.filters\n    );\n    return sortEmployees(filteredEmployees, this.state.sort);\n  };\n\n  componentDidMount() {\n    API.getEmployees().then(employees => {\n      this.setState({ employees }, function () {\n        console.log(this.state.employees);\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"mt-3\">\n              <i className=\"fas fa-id-badge mr-3\"></i>Employee Directory\n            </h1>\n          </div>\n        </div>\n        <div className=\"row py-3\">\n          <div className=\"col\">\n            <form>\n              <TextFilter\n                id=\"name-filter\"\n                title=\"Filter by name:\"\n                placeholder=\"Type a name to begin filtering\"\n                onChange={this.changeNameFilter}\n              />\n              <CheckGroupFilter\n                filters={this.state.filters}\n                checkList={EMPLOYEE_TITLES}\n                update={this.changeTitleFilter}\n              />\n            </form>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <table className=\"table table-hover\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">Image</th>\n                  <th scope=\"col\">Title</th>\n                  {NAME_SORT.map((nameObj, index) => (\n                    <THSort\n                      key={index}\n                      title={nameObj.title}\n                      icon={this.state.sort[nameObj.title]}\n                      onClick={() => {\n                        this.changeNameSort(nameObj.title);\n                      }}\n                    />\n                  ))}\n                  <th scope=\"col\">Email</th>\n                  <th scope=\"col\">Phone Number</th>\n                  <th scope=\"col\">Postal Code</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.getEmployees().map((employee, index) => (\n                  <EmployeeRow\n                    key={index}\n                    employee={employee}\n                    nameMatch={this.state.filters.name}\n                  />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EmployeeTable;\n","import React from \"react\";\nimport EmployeeTable from \"./EmployeeTable\";\n\nfunction App() {\n  return <EmployeeTable />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}